-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TABLE IF NOT EXISTS "heartbeats" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "heartbeats_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"timestamp" timestamp with time zone DEFAULT now() NOT NULL,
	"source" text NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "heartbeats" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "contact_submissions" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"created_at" timestamp with time zone DEFAULT now(),
	"name" varchar NOT NULL,
	"email" varchar NOT NULL,
	"phone" varchar,
	"wechat" varchar,
	"address" text,
	"zipcode" varchar,
	"message" text NOT NULL,
	"staus" varchar
);
--> statement-breakpoint
ALTER TABLE "contact_submissions" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "fce_applications" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"status" text DEFAULT 'draft' NOT NULL,
	"current_step" smallint DEFAULT 0 NOT NULL,
	"name" text NOT NULL,
	"country" text NOT NULL,
	"street_address" text NOT NULL,
	"street_address2" text,
	"city" text NOT NULL,
	"region" text NOT NULL,
	"zip_code" text NOT NULL,
	"fax" text,
	"phone" text NOT NULL,
	"email" text NOT NULL,
	"purpose" text NOT NULL,
	"purpose_other" text,
	"pronouns" text NOT NULL,
	"first_name" text NOT NULL,
	"last_name" text NOT NULL,
	"middle_name" text,
	"date_of_birth" date NOT NULL,
	"service_type" jsonb NOT NULL,
	"delivery_method" text NOT NULL,
	"additional_services" text[] DEFAULT '{""}',
	"additional_services_quantity" jsonb DEFAULT '{"pdf_only":0,"extra_copy":0,"pdf_with_hard_copy":0}'::jsonb,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"updated_at" timestamp with time zone DEFAULT now() NOT NULL,
	"submitted_at" timestamp with time zone,
	CONSTRAINT "fce_applications_delivery_method_check" CHECK (delivery_method = ANY (ARRAY['no_delivery_needed'::text, 'usps_first_class_domestic'::text, 'usps_first_class_international'::text, 'usps_priority_domestic'::text, 'usps_express_domestic'::text, 'ups_express_domestic'::text, 'usps_express_international'::text, 'fedex_express_international'::text])),
	CONSTRAINT "fce_applications_email_check" CHECK (email ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text),
	CONSTRAINT "fce_applications_fax_check" CHECK (fax ~ '^\d{3}-\d{3}-\d{4}$'::text),
	CONSTRAINT "fce_applications_phone_check" CHECK (phone ~ '^\d{3}-\d{3}-\d{4}$'::text),
	CONSTRAINT "fce_applications_pronouns_check" CHECK (pronouns = ANY (ARRAY['mr'::text, 'ms'::text, 'mx'::text])),
	CONSTRAINT "fce_applications_purpose_check" CHECK (purpose = ANY (ARRAY['immigration'::text, 'employment'::text, 'education'::text, 'other'::text])),
	CONSTRAINT "fce_applications_status_check" CHECK (status = ANY (ARRAY['draft'::text, 'submitted'::text, 'processing'::text, 'completed'::text, 'cancelled'::text])),
	CONSTRAINT "fce_applications_zip_code_check" CHECK (zip_code ~ '^\d{5}(-\d{4})?$'::text),
	CONSTRAINT "valid_purpose_other" CHECK (((purpose = 'other'::text) AND (purpose_other IS NOT NULL)) OR ((purpose <> 'other'::text) AND (purpose_other IS NULL)))
);
--> statement-breakpoint
ALTER TABLE "fce_applications" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "fce_educations" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"application_id" uuid NOT NULL,
	"country_of_study" text NOT NULL,
	"degree_obtained" text NOT NULL,
	"school_name" text NOT NULL,
	"study_start_date" jsonb NOT NULL,
	"study_end_date" jsonb NOT NULL
);
--> statement-breakpoint
ALTER TABLE "fce_educations" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "fce_educations" ADD CONSTRAINT "fce_educations_application_id_fkey" FOREIGN KEY ("application_id") REFERENCES "public"."fce_applications"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "idx_fce_applications_email" ON "fce_applications" USING btree ("email" text_ops);--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "idx_fce_applications_status" ON "fce_applications" USING btree ("status" text_ops);--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "idx_fce_educations_application" ON "fce_educations" USING btree ("application_id" uuid_ops);--> statement-breakpoint
CREATE POLICY "Service role can insert heartbeats" ON "heartbeats" AS PERMISSIVE FOR INSERT TO public WITH CHECK ((auth.role() = 'service_role'::text));--> statement-breakpoint
CREATE POLICY "Delete old heartbeats" ON "heartbeats" AS PERMISSIVE FOR DELETE TO public;--> statement-breakpoint
CREATE POLICY "Enable insert for all users" ON "contact_submissions" AS PERMISSIVE FOR INSERT TO public WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Anyone can update draft applications" ON "fce_applications" AS PERMISSIVE FOR UPDATE TO public USING ((status = 'draft'::text));--> statement-breakpoint
CREATE POLICY "Anyone can view applications with ID" ON "fce_applications" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Anyone can create applications" ON "fce_applications" AS PERMISSIVE FOR INSERT TO public;--> statement-breakpoint
CREATE POLICY "Anyone can manage educations" ON "fce_educations" AS PERMISSIVE FOR ALL TO public USING (true);
*/