---
description: 
globs: e2e/**,**.spec.ts,playwright.config.ts
alwaysApply: false
---
# E2E Testing with Playwright
description: Best practices and conventions for end-to-end testing with Playwright
globs: e2e/**, **.spec.ts, playwright.config.ts

## Overview
When writing E2E tests with Playwright, follow these guidelines to ensure consistent, maintainable, and reliable tests.

## File Structure
- Place config in `playwright.config.ts`
- Place all E2E tests in the `e2e` directory
- Name test files with `.spec.ts` extension
- Use descriptive filenames that reflect the feature being tested
- Group related tests in subdirectories by feature or page

## Test Structure
- Use `test.describe` for logical grouping of tests
- Use `test` for individual test cases
- Provide clear, descriptive test names
- Follow the AAA pattern (Arrange, Act, Assert)
- Keep tests independent and isolated from each other
- Avoid test interdependencies

## Best Practices
- Use Latin in code and comments
- Use page objects or component objects for better abstraction
- Prefer role-based selectors (getByRole, getByLabel) over CSS selectors
- Use data-testid attributes when role-based selectors aren't suitable
- Implement proper waiting strategies (avoid arbitrary timeouts)
- Handle dialogs and popups appropriately
- Clean up state between tests using `afterEach` hooks
- Use expect assertions with descriptive error messages
- Take screenshots on test failures with `page.screenshot()`

## Example Test Structure
```typescript
import { test, expect } from '@playwright/test';
import { LoginPage } from '../page-objects/login-page';

test.describe('Login functionality', () => {
  let loginPage: LoginPage;

  test.beforeEach(async ({ page }) => {
    loginPage = new LoginPage(page);
    await loginPage.navigate();
  });

  test('should login with valid credentials', async () => {
    // Arrange
    const username = 'testuser';
    const password = 'password123';

    // Act
    await loginPage.login(username, password);

    // Assert
    await expect(loginPage.welcomeMessage).toBeVisible();
  });

  test('should show error with invalid credentials', async () => {
    // Arrange
    const username = 'wronguser';
    const password = 'wrongpassword';

    // Act
    await loginPage.login(username, password);

    // Assert
    await expect(loginPage.errorMessage).toBeVisible();
    await expect(loginPage.errorMessage).toContainText('Invalid credentials');
  });
});
```

## Page Object Pattern
Create page objects to encapsulate page-specific logic:

```typescript
export class LoginPage {
  readonly page: Page;
  readonly usernameInput: Locator;
  readonly passwordInput: Locator;
  readonly loginButton: Locator;
  readonly errorMessage: Locator;
  readonly welcomeMessage: Locator;

  constructor(page: Page) {
    this.page = page;
    this.usernameInput = page.getByLabel('Username');
    this.passwordInput = page.getByLabel('Password');
    this.loginButton = page.getByRole('button', { name: 'Login' });
    this.errorMessage = page.getByRole('alert');
    this.welcomeMessage = page.getByText('Welcome');
  }

  async navigate() {
    await this.page.goto('/login');
  }

  async login(username: string, password: string) {
    await this.usernameInput.fill(username);
    await this.passwordInput.fill(password);
    await this.loginButton.click();
  }
}
```

## Configuration
- Configure different environments (dev, staging, prod) in playwright.config.ts
- Use environment variables for sensitive information
- Set appropriate timeouts based on application needs
- Configure retries for flaky tests
- Set up CI pipeline integration

## Debugging Tips
- Use `test.only` to focus on specific tests during development
- Use `await page.pause()` to pause execution and use Playwright Inspector
- Enable tracing with `--trace on` for detailed execution information
- Review screenshots and videos generated during test runs